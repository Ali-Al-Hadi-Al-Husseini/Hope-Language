statements              : NEWLINE* statement (NEWLINE+ statement)* NEWLINE*

statement		        : keyword:RETURN expr?
                        : keyword:CONTINUE
                        : keyword:BREAK
                        : expr

expr                    : keyword:let IDENTIFIER = expr
                        : comp-expression ((keyword:AND|keyword:OR) comp-expr)*

comparison-expresion    : expression comparison-operator expression
comparison-operators    : > | < | >= | <= | == | != | and | or | & | "|" 
negation-operator       : not

arith-expression             :	term (+ | -) term)*

term                    : factor ( * | /) factor)*

factor                  : (PLUS|MINUS) factor
                        : power

power                   : call (^) factor

call                    : most (LPAREN (expr (COMMA expr)*)? RPAREN)?


most                    : INT|FLOAT|STRING|IDENTIFIER
                        : LPAREN expression RPAREN
                        : list-expression
                        : if-expression
                        : for-expression
                        : while-expression
                        : func-def



variable-declaration    : variable-keyword variable-name assignment-operator variable-body
variable-keyword        : let
variable-name           : identifier
assignment-operator     : = 
variable-body           : function-declaration | expression | comparison | if-expression

list-expression         : [ (expr (COMMA expr)*)? ]

if-expression           : keyword:if comparison-Expression symbol:>> NEWLINE body  NEWLINE symbol:<<
                        : keyword:if comparison-Expression symbol:>> body 
                        (statement elif-expression |else-expression ?)
                        

elif-expression         : keyword:elif expr symbol:>>
                        (statement elif-expression-b|else-expression?)
                        

else-expression         : keyword:else >>
                        statement
                

for-expression          : keyword:for IDENTIFIER = start_expression symbol: -> end_exprsion symbol:>> newline statments symbol: << 
inline-for-expresion    :  keyword:for IDENTIFIER = start_expression symbol: -> end_exprsion symbol:>> statment


while-expression        : keyword:while expression symbol:>> newline statments newline <<
inline-while-expression : inline while loop keyword:while expression symbol:>> statment  


function-def            : keyword:func identifier symbol:( paramters,* symbol:) symbol:>> newline statments keyword:return newline <<
func-def_in variables   : keyword:let identifier symbol:= keyword:func symbol:( paramters,* symbol:)symbol:>> newline statments keyword:return newline <<
inline-func-def         :keywordL func identifier symbol:( paramters,* symbol:) symbol:>> expresion
